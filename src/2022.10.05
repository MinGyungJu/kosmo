--복습
--1. 사원번호, 이름, 업무, 급여,  현재 급여에 15% 증가된 급여를(New Salary),  증가액(Increase)를 출력 0
SELECT EMPNO, ENAME, JOB, SAL, (SAL*1.15) AS NEW_SALARY, SAL*1.15-SAL AS INCREASE
FROM EMP;
?
--2. 이름, 입사일, 입사일로부터 6개월 후에 돌아오는 월요일을 출력 ?
SELECT ENAME, HIREDATE, next_daY( ADD_MONTHS(HIREDATE,6),'월')AS "6개월후"
FROM EMP;

--3.이름, 입사일, 입사일로부터 현재까지의  년수, 급여, 입사일로부터 현재까지의 급여의 총계를 출력 X
SELECT ENAME, HIREDATE, trunc(MONTHS_BETWEEN (sysdate,hiredate)/12)AS "연수",SAL, SAL*(trunc(MONTHS_BETWEEN (sysdate,hiredate)/12))AS "급여총계"
FROM EMP;

SELECT ENAME, HIREDATE, SAL,
TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(HIREDATE,'YYYY') AS WORKYEAR,
SAL*(TO_CHAR(SYSDATE,'YYYY')-TO_CHAR(HIREDATE,'YYYY')) AS SUMSAL

?
--4.이름, 업무, 입사일, 입사한 요일을 출력 X
SELECT ENAME, JOB, HIREDATE, TO_CHAR(HIREDATE,'DAY')AS "요일"
FROM EMP;


--5. 업무별, 부서별 급여 합계와 인원수를 출력하되, 
  -- 10번 부서를 제외하고 업무가 ‘SALESMAN’과 ‘MANAGER’만 출력한다.0
SELECT JOB, SUM(SAL)AS SUM,COUNT(*)
FROM EMP
WHERE DEPTNO != 10
AND JOB LIKE 'SALESMAN'
OR JOB LIKE 'MANAGER'
GROUP BY JOB, DEPTNO;

--6. 업무별로 평균급여와 최대급여를 출력하되, 평균급여가 2000이상인 것만 출력하고 평균급여가 높은 순으로 정렬 0
SELECT ROUND(AVG(SAL),2)AS AVG,MAX(SAL)
FROM EMP
GROUP BY JOB
HAVING AVG(SAL)>=2000
ORDER BY AVG(SAL) DESC;
?
--7. 같은 입사년도 별로 인원수를 출력 0
SELECT TO_CHAR(HIREDATE,'YYYY'),COUNT(*)
FROM EMP
GROUP BY TO_CHAR(HIREDATE,'YYYY');

--8. 5개씩 급여합계와 인원수를 출력 (rownum이용)
SELECT CEIL(ROWNUM/5),SUM(SAL), COUNT(*)
FROM EMP
GROUP BY CEIL(ROWNUM/5);

--9. 
SELECT JOB,COUNT(JOB)
FROM EMP
GROUP BY JOB
HAVING JOB = 'CLERK'
OR JOB = 'SALESMAN'
OR JOB = 'MANAGER';

SELECT COUNT(decode(JOB,'CLERK', 1)) clerk, COUNT(decode(JOB,'SALESMAN',1)) salesman,
            COUNT(decode(JOB,'MANAGER',1)) MANAGER
FROM emp;

--10
SELECT JOB, NVL(SUM(DECODE(DEPTNO,'10',SAL)),0) "10번부서", NVL(SUM(DECODE(DEPTNO,'20',SAL)),0) "20번부서",
            NVL(SUM(DECODE(DEPTNO,'30',SAL)),0) "30번부서", SUM(SAL) AS 급여합계
FROM EMP
GROUP BY JOB;

----------------------------------------------------
--사원테이블(emp)에 사원명과 부서테이블(dept)에 그 사원의 부서명을 출력
SELECT ENAME, DNAME
FROM EMP, DEPT;

SELECT E.ENAME, D.DNAME, D.DEPTNO
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;
--내부조인
SELECT E.ENAME AS ENAME, D.DNAME AS DNAME, D.DEPTNO AS DEPTNO
FROM EMP  E, DEPT  D
WHERE E.DEPTNO = D.DEPTNO;

--내부조인 표준안
select e.ename, d.dname, d.deptno
from emp e INNER JOIN dept d
ON e.deptno = d.deptno;

--외부조인
SELECT E.ENAME AS ENAME, D.DNAME AS DNAME, D.DEPTNO AS DEPTNO
FROM EMP  E, DEPT  D
WHERE E.DEPTNO = D.DEPTNO(+);

--외부조인 표준안 LEFT
SELECT E.ENAME AS ENAME, D.DNAME AS DNAME, D.DEPTNO AS DEPTNO
FROM EMP  E LEFT OUTER JOIN DEPT  D
ON E.DEPTNO = D.DEPTNO;

SELECT E.ENAME AS ENAME, D.DNAME AS DNAME, D.DEPTNO AS DEPTNO
FROM EMP  E, DEPT  D
WHERE E.DEPTNO(+) = D.DEPTNO;
--  ==
--외부조인 표준안
SELECT E.ENAME AS ENAME, D.DNAME AS DNAME, D.DEPTNO AS DEPTNO
FROM EMP  E RIGHT OUTER JOIN DEPT  D
ON E.DEPTNO = D.DEPTNO;

SELECT E.ENAME AS ENAME, D.DNAME AS DNAME, D.DEPTNO AS DEPTNO
FROM EMP  E, DEPT  D
WHERE E.DEPTNO(+) = D.DEPTNO(+); --에러

--풀 아우터 조인 (거의 안씀)
SELECT E.ENAME AS ENAME, D.DNAME AS DNAME, D.DEPTNO AS DEPTNO
FROM EMP  E FULL OUTER JOIN DEPT  D
ON E.DEPTNO = D.DEPTNO;

-- 사원테이블(emp)에 각 사원의 매니저를 조회
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO, E2.ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO;
--표준안
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO, E2.ENAME
FROM EMP E1 INNER JOIN EMP E2
ON E1.MGR = E2.EMPNO;
--외부조인
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO, E2.ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO(+);
--외부조인 표준안
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO, E2.ENAME
FROM EMP E1 LEFT OUTER JOIN EMP E2
ON E1.MGR = E2.EMPNO;
--` 업무가 CLERK인 사원조회
--` 10번 부서의 사원조회
SELECT empno, ename, job, deptno FROM emp WHERE job='CLERK'
    --스미스/아담스/제임스/밀러
    INTERSECT  -- 합집함임 ( 4 +2) 해서 6나옴
SELECT empno, ename, job, deptno FROM emp WHERE deptno=10;
    --클락/ 킹/ 밀러
---------------------------------------------------------------------------------
--연습
--1. EMP 테이블에서 사원번호, 이름, 업무, 부서번호와 DEPT 테이블에서 부서명, 근무지를 출력
SELECT E.EMPNO EMPNO, E.ENAME ENAME, E.JOB JOB, E.DEPTNO E_DEPTNO, D.DNAME DNAME, D.LOC LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO(+);

SELECT E.EMPNO EMPNO, E.ENAME ENAME, E.JOB JOB, E.DEPTNO E_DEPTNO, D.DNAME DNAME, D.LOC LOC
FROM EMP E LEFT JOIN DEPT D
ON E.DEPTNO = D.DEPTNO;


--2. SALESMAN 사원만 사원번호, 이름, 급여, 부서명, 근무지를 출력
SELECT E.EMPNO EMPNO, E.ENAME ENAME, E.SAL SAL, D.DNAME DNAME, D.LOC LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO(+)
AND E.JOB = 'SALESMAN';

SELECT E.EMPNO EMPNO, E.ENAME ENAME, E.SAL SAL, D.DNAME DNAME, D.LOC LOC
FROM EMP E LEFT OUTER JOIN DEPT D
ON E.DEPTNO = D.DEPTNO
WHERE E.JOB = 'SALESMAN';
?

--3. 보너스(comm)를 받는 사원에 대해 이름, 부서명, 위치를 출력
SELECT E.EMPNO EMPNO, E.ENAME ENAME, D.DNAME DNAME, D.LOC LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
AND E.COMM >0;

SELECT E.EMPNO EMPNO, E.ENAME ENAME, D.DNAME DNAME, D.LOC LOC
FROM EMP E LEFT OUTER JOIN DEPT D
ON E.DEPTNO = D.DEPTNO
WHERE E.COMM >0;
?

--4. 부서별 부서명과 급여 합계를 출력
SELECT  D.DNAME DNAME, SUM(E.SAL)
FROM EMP E, DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO
GROUP BY D.DNAME;

SELECT  D.DNAME DNAME, SUM(E.SAL)
FROM EMP E RIGHT OUTER JOIN DEPT D
ON E.DEPTNO = D.DEPTNO
GROUP BY D.DNAME;


-- 5. 업무가 ‘MANAGER’인 사원의 정보를 이름, 업무, 부서명, 근무지를 출력 
SELECT E.ENAME ENAME, E.JOB JOB, D.DNAME DNAME, D.LOC LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO 
AND E.JOB = 'MANAGER';

SELECT E.ENAME ENAME, E.JOB JOB, D.DNAME DNAME, D.LOC LOC
FROM EMP E LEFT OUTER JOIN DEPT D
ON E.DEPTNO = D.DEPTNO 
WHERE E.JOB = 'MANAGER';

--1. 이름의 성이 'King' 사원의 사번과 부서명을 출력 ( employees, departments )
SELECT E.EMPLOYEE_ID SABUN, D.DEPARTMENT_NAME DNAME
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D. DEPARTMENT_ID
AND E.LAST_NAME = 'King';

SELECT E.EMPLOYEE_ID SABUN, D.DEPARTMENT_NAME DNAME
FROM EMPLOYEES E INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D. DEPARTMENT_ID
WHERE E.LAST_NAME  LIKE 'King';


--2. 이름의 성이 'King' 사원의 사번과 부서명 그리고 업무명을 출력 ( employees, departments, jobs )
SELECT E.EMPLOYEE_ID "사번", D.DEPARTMENT_NAME "부서명", E.JOB_ID "업무명" 
FROM EMPLOYEES E FULL OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
FULL OUTER JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
WHERE E.LAST_NAME = 'King';

SELECT E.EMPLOYEE_ID AS 사번 , D.DEPARTMENT_NAME AS 부서명, J.JOB_TITLE AS 업무명
FROM EMPLOYEES E FULL OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
FULL OUTER JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
WHERE E.LAST_NAME LIKE 'King';

--3. 2007년 상반기에 입사한 사원들의 사번과 이름, 입사일 그리고 부서명을 출력
--(*) Grant는 아직 부서가 배정받지 못한 상태이지만 Grant도 출력되려면
SELECT E.EMPLOYEE_ID 사번, E.LAST_NAME 이름, E.HIRE_DATE 입사일, D.DEPARTMENT_NAME 부서명
FROM EMPLOYEES E LEFT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
where TO_CHAR(HIRE_DATE,'YYYYMM') BETWEEN '200707' AND '200712'
?

--4. 'Executive' 부서에서 사원과 해당 사원의 매니저(상사) 이름을 출력
--(*) 매니저(상사)가 없는 사원인 'King'이 출력되려면
SELECT E1.FIRST_NAME||' '||E1.LAST_NAME AS 이름, E2.FIRST_NAME||' '||E2.LAST_NAME AS 상사이름
FROM EMPLOYEES E1 LEFT OUTER JOIN DEPARTMENTS D
        ON E1.DEPARTMENT_ID = D.DEPARTMENT_ID 
FULL OUTER JOIN EMPLOYEES E2
        ON E1.MANAGER_ID = E2.EMPLOYEE_ID
WHERE D.DEPARTMENT_NAME LIKE 'Executive';

SELECT E1.FIRST_NAME||' '||E1.LAST_NAME AS 이름, E2.FIRST_NAME|| ' '||E2.LAST_NAME AS 상사이름
FROM EMPLOYEES E1 inner JOIN DEPARTMENTS D 
    ON E1.DEPARTMENT_ID = D. DEPARTMENT_ID
FULL OUTER JOIN EMPLOYEES E2
    ON E1.MANAGER_ID = E2.EMPLOYEE_ID
WHERE D.DEPARTMENT_NAME = 'Executive';



-- SQL 문제 1


SELECT S.학번, S.이름
FROM STUDENT S, ENROLL E
WHERE S.학번 = E.학번
GROUP BY S.학번
HAVING AVG(E.학점)>= 3.0;

-- SQL 문제 2

SELECT D.DEPTNO, E.DEPTNO
FROM DEPT D FULL OUTER JOIN EMP E
ON D.DEPTNO = E.DEPTNO;

?

?